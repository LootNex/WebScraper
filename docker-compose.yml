services:
  auth:
    container_name: auth
    build: 
      dockerfile: auth/.build/build/Dockerfile
      context: .
    env_file:
      - auth/.env
    ports:
      - "44045:44045"
    networks:
      - price_tracker_network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "grpc_health_probe -addr=:44045"]
      interval: 1m30s
      timeout: 20s
      retries: 3
      start_period: 15s
  database:
    container_name: postgres
    image: postgres:latest
    environment:
      - "POSTGRES_PASSWORD=passprice"
      - "POSTGRES_DB=tracker"
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - price_tracker_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tracker"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 5s
  db_init_schemas:
    container_name: init_schemas
    build:
      context: .
      dockerfile: database/postgres/init_schemas/Dockerfile
    env_file:
      - database/postgres/.env
    depends_on:
      database:
        condition: service_healthy
    networks:
      - price_tracker_network
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    volumes:
      - redis_volume_data:/data
    ports:
      - 6379:6379
    environment:
      REDIS_PASSWORD: redispass
    command: ["redis-server", "--requirepass", "redispass"]
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -a redispass ping | grep PONG"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - price_tracker_network
    depends_on:
      db_init_schemas:
        condition: service_completed_successfully
  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: gateway/cmd/api-gateway/Dockerfile
    env_file:
      - gateway/.env
    ports:
      - "8080:8080"
    networks:
      - price_tracker_network
    depends_on:
      auth:
        condition:
          service_healthy
  telegram-bot:
    container_name: telegram-bot
    build:
      context: .
      dockerfile: gateway/cmd/telegram-bot/Dockerfile
    env_file:
      - gateway/.env
    depends_on:
      auth:
        condition:
          service_healthy
    networks:
      - price_tracker_network
  tracker:
    image: price_monitoring
    build:
      dockerfile: price_monitoring/Dockerfile
      context: .
    env_file:
      - price_monitoring/internal/db/config.env
    ports:
      - 50051:50051
    depends_on:
      auth:
        condition: service_healthy
    networks:
      - price_tracker_network
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8081:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      auth:
        condition: service_healthy
    networks:
      - price_tracker_network

volumes:
  pgdata:
  redis_volume_data:

networks:
  price_tracker_network:
    driver: bridge