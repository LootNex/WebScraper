// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/price_monitoring.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PriceMonitoringService_AddItem_FullMethodName         = "/price_monitoring.PriceMonitoringService/AddItem"
	PriceMonitoringService_CheckItem_FullMethodName       = "/price_monitoring.PriceMonitoringService/CheckItem"
	PriceMonitoringService_GetAllItems_FullMethodName     = "/price_monitoring.PriceMonitoringService/GetAllItems"
	PriceMonitoringService_GetPriceHistory_FullMethodName = "/price_monitoring.PriceMonitoringService/GetPriceHistory"
	PriceMonitoringService_CheckAll_FullMethodName        = "/price_monitoring.PriceMonitoringService/CheckAll"
)

// PriceMonitoringServiceClient is the client API for PriceMonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceMonitoringServiceClient interface {
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error)
	CheckItem(ctx context.Context, in *CheckItemRequest, opts ...grpc.CallOption) (*CheckItemResponse, error)
	GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error)
	GetPriceHistory(ctx context.Context, in *PriceHistoryRequest, opts ...grpc.CallOption) (*PriceHistoryResponse, error)
	CheckAll(ctx context.Context, in *CheckAllRequest, opts ...grpc.CallOption) (*CheckAllResponse, error)
}

type priceMonitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceMonitoringServiceClient(cc grpc.ClientConnInterface) PriceMonitoringServiceClient {
	return &priceMonitoringServiceClient{cc}
}

func (c *priceMonitoringServiceClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddItemResponse)
	err := c.cc.Invoke(ctx, PriceMonitoringService_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceMonitoringServiceClient) CheckItem(ctx context.Context, in *CheckItemRequest, opts ...grpc.CallOption) (*CheckItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckItemResponse)
	err := c.cc.Invoke(ctx, PriceMonitoringService_CheckItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceMonitoringServiceClient) GetAllItems(ctx context.Context, in *GetAllItemsRequest, opts ...grpc.CallOption) (*GetAllItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllItemsResponse)
	err := c.cc.Invoke(ctx, PriceMonitoringService_GetAllItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceMonitoringServiceClient) GetPriceHistory(ctx context.Context, in *PriceHistoryRequest, opts ...grpc.CallOption) (*PriceHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PriceHistoryResponse)
	err := c.cc.Invoke(ctx, PriceMonitoringService_GetPriceHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceMonitoringServiceClient) CheckAll(ctx context.Context, in *CheckAllRequest, opts ...grpc.CallOption) (*CheckAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAllResponse)
	err := c.cc.Invoke(ctx, PriceMonitoringService_CheckAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriceMonitoringServiceServer is the server API for PriceMonitoringService service.
// All implementations must embed UnimplementedPriceMonitoringServiceServer
// for forward compatibility.
type PriceMonitoringServiceServer interface {
	AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error)
	CheckItem(context.Context, *CheckItemRequest) (*CheckItemResponse, error)
	GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error)
	GetPriceHistory(context.Context, *PriceHistoryRequest) (*PriceHistoryResponse, error)
	CheckAll(context.Context, *CheckAllRequest) (*CheckAllResponse, error)
	mustEmbedUnimplementedPriceMonitoringServiceServer()
}

// UnimplementedPriceMonitoringServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPriceMonitoringServiceServer struct{}

func (UnimplementedPriceMonitoringServiceServer) AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedPriceMonitoringServiceServer) CheckItem(context.Context, *CheckItemRequest) (*CheckItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckItem not implemented")
}
func (UnimplementedPriceMonitoringServiceServer) GetAllItems(context.Context, *GetAllItemsRequest) (*GetAllItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItems not implemented")
}
func (UnimplementedPriceMonitoringServiceServer) GetPriceHistory(context.Context, *PriceHistoryRequest) (*PriceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceHistory not implemented")
}
func (UnimplementedPriceMonitoringServiceServer) CheckAll(context.Context, *CheckAllRequest) (*CheckAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAll not implemented")
}
func (UnimplementedPriceMonitoringServiceServer) mustEmbedUnimplementedPriceMonitoringServiceServer() {
}
func (UnimplementedPriceMonitoringServiceServer) testEmbeddedByValue() {}

// UnsafePriceMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceMonitoringServiceServer will
// result in compilation errors.
type UnsafePriceMonitoringServiceServer interface {
	mustEmbedUnimplementedPriceMonitoringServiceServer()
}

func RegisterPriceMonitoringServiceServer(s grpc.ServiceRegistrar, srv PriceMonitoringServiceServer) {
	// If the following call pancis, it indicates UnimplementedPriceMonitoringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PriceMonitoringService_ServiceDesc, srv)
}

func _PriceMonitoringService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceMonitoringServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceMonitoringService_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceMonitoringServiceServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceMonitoringService_CheckItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceMonitoringServiceServer).CheckItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceMonitoringService_CheckItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceMonitoringServiceServer).CheckItem(ctx, req.(*CheckItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceMonitoringService_GetAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceMonitoringServiceServer).GetAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceMonitoringService_GetAllItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceMonitoringServiceServer).GetAllItems(ctx, req.(*GetAllItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceMonitoringService_GetPriceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceMonitoringServiceServer).GetPriceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceMonitoringService_GetPriceHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceMonitoringServiceServer).GetPriceHistory(ctx, req.(*PriceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceMonitoringService_CheckAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceMonitoringServiceServer).CheckAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceMonitoringService_CheckAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceMonitoringServiceServer).CheckAll(ctx, req.(*CheckAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PriceMonitoringService_ServiceDesc is the grpc.ServiceDesc for PriceMonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceMonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "price_monitoring.PriceMonitoringService",
	HandlerType: (*PriceMonitoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItem",
			Handler:    _PriceMonitoringService_AddItem_Handler,
		},
		{
			MethodName: "CheckItem",
			Handler:    _PriceMonitoringService_CheckItem_Handler,
		},
		{
			MethodName: "GetAllItems",
			Handler:    _PriceMonitoringService_GetAllItems_Handler,
		},
		{
			MethodName: "GetPriceHistory",
			Handler:    _PriceMonitoringService_GetPriceHistory_Handler,
		},
		{
			MethodName: "CheckAll",
			Handler:    _PriceMonitoringService_CheckAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/price_monitoring.proto",
}
